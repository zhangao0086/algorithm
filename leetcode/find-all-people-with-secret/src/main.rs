struct Solution;

impl Solution {
    /**
     You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.

    Person 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.

    The secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.

    Return a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.
     */
    pub fn find_all_people(n: i32, meetings: Vec<Vec<i32>>, first_person: i32) -> Vec<i32> {
        let mut graph = vec![vec![]; n as usize];
        for meeting in meetings {
            graph[meeting[0] as usize].push((meeting[1], meeting[2]));
            graph[meeting[1] as usize].push((meeting[0], meeting[2]));
        }
        let mut know = vec![i32::MAX; n as usize];
        let mut queue = std::collections::VecDeque::new();
        queue.push_back((0, 0));
        queue.push_back((first_person, 0));
        know[0] = 0;
        know[first_person as usize] = 0;
        while !queue.is_empty() {
            let (person, time) = queue.pop_front().unwrap();
            for &(next_person, next_time) in &graph[person as usize] {
                if next_time >= time {
                    let prev = know[next_person as usize];
                    know[next_person as usize] = next_time.min(prev);
                    if prev > next_time {
                        queue.push_back((next_person, next_time));
                    }
                }
            }
        }
        know.iter().enumerate().filter(|(_, &x)| x < i32::MAX).map(|(i, _)| i as i32).collect()
    }
}

fn main() {
    let meetings = vec![vec![1,2,5], vec![2,3,8], vec![1,5,10]];
    let ans = Solution::find_all_people(6, meetings, 1);
    println!("{:?}", ans);
    
    println!("{:?}", Solution::find_all_people(6, vec![vec![0,2,1],vec![1,3,1],vec![4,5,1]], 1));

    println!("{:?}", Solution::find_all_people(135, vec![
        vec![26,7,481],
        vec![28,120,80],
        vec![87,71,36],
        vec![11,86,164],
        vec![87,32,4],
        vec![8,104,240],
        vec![110,6,27],
        vec![120,126,209],
        vec![5,67,220],
        vec![61,47,175],
        vec![60,52,86],
        vec![88,53,453],
        vec![40,124,206],
        vec![122,22,62],
        vec![4,26,433],
        vec![46,56,214],
        vec![15,6,264],
        vec![128,31,313],
        vec![24,20,393],
        vec![7,20,282],
        vec![65,84,216],
        vec![55,132,241],
        vec![50,32,338],
        vec![61,69,459],
        vec![130,2,53],
        vec![43,106,322],
        vec![61,51,99],
        vec![43,61,64],
        vec![34,37,474],
        vec![94,116,338],
        vec![19,133,277],
        vec![82,40,148],
        vec![124,129,496],
        vec![73,82,417],
        vec![7,6,416],
        vec![61,15,98],
        vec![92,45,293],
        vec![78,109,130],
        vec![120,9,181],
        vec![84,23,390],
        vec![102,78,263],
        vec![104,130,262],
        vec![46,124,25],
        vec![125,101,112],
        vec![131,44,427],
        vec![78,71,96],
        vec![81,16,73],
        vec![58,49,18],
        vec![72,113,437],
        vec![28,119,3],
        vec![9,19,249],
        vec![113,121,58],
        vec![18,93,219],
        vec![112,117,412],
        vec![69,110,111],
        vec![100,44,377],
        vec![8,121,359],
        vec![86,98,57],
        vec![78,75,49],
        vec![104,58,276],
        vec![2,43,178],
        vec![73,64,352],
        vec![104,37,298],
        vec![14,88,184],
        vec![76,56,393],
        vec![0,90,144],
        vec![17,8,219],
        vec![31,127,455],
        vec![61,101,84],
        vec![100,87,398],
        vec![3,118,342],
        vec![98,50,272],
        vec![126,123,113],
        vec![28,52,122],
        vec![44,69,32],
        vec![127,96,473],
        vec![113,116,72],
        vec![104,46,436],
        vec![1,69,343],
        vec![51,18,338],
        vec![15,23,250],
        vec![21,118,258],
        vec![98,6,287],
        vec![111,34,468],
        vec![66,5,163],
        vec![86,16,158],
        vec![113,4,31],
        vec![8,58,421],
        vec![58,96,351],
        vec![131,101,66],
        vec![38,41,19],
        vec![78,0,282],
        vec![90,128,494],
        vec![73,6,246],
        vec![117,22,186],
        vec![84,88,145],
        vec![96,109,119],
        vec![20,112,324],
        vec![74,2,6],
        vec![46,60,365],
        vec![50,17,117],
        vec![88,34,310],
        vec![4,53,89],
        vec![102,81,454],
        vec![75,10,172],
        vec![71,39,481],
        vec![4,1,472],
        vec![108,73,487],
        vec![34,23,84],
        vec![101,82,215],
        vec![17,76,83],
        vec![38,66,230],
        vec![89,72,142],
        vec![130,75,145],
        vec![44,76,320],
        vec![83,128,131],
        vec![108,121,245],
        vec![9,33,234],
        vec![42,9,394],
        vec![125,110,453],
        vec![89,27,127],
        vec![79,17,40],
        vec![119,25,434],
        vec![12,118,296],
        vec![79,124,430],
        vec![61,70,353],
        vec![0,125,447],
        vec![7,27,330],
        vec![27,132,406],
        vec![43,3,214],
        vec![49,11,246],
        vec![19,31,158],
        vec![41,4,438],
        vec![9,115,28],
        vec![118,128,314],
        vec![109,64,280],
        vec![99,105,486],
        vec![10,29,8],
        vec![30,51,179],
        vec![53,29,27],
        vec![105,12,143],
        vec![113,43,326],
        vec![123,90,126],
        vec![117,14,9],
        vec![65,10,20],
        vec![24,77,494],
        vec![80,24,308],
        vec![16,106,347],
        vec![100,41,384],
        vec![104,7,293],
        vec![34,15,464],
        vec![98,18,331],
        vec![128,80,432],
        vec![55,93,164],
        vec![50,30,397],
        vec![68,65,396],
        vec![122,44,383],
        vec![125,122,192],
        vec![117,110,261],
        vec![32,8,229],
        vec![24,132,183],
        vec![2,30,159],
        vec![70,76,151],
        vec![79,111,242],
        vec![108,33,260],
        vec![91,25,427],
        vec![36,2,360],
        vec![96,111,270],
        vec![85,104,456],
        vec![84,24,408],
        vec![11,16,471],
        vec![109,7,58],
        vec![90,35,232],
        vec![80,58,298],
        vec![74,67,41],
        vec![11,96,425],
        vec![108,79,272],
        vec![8,118,305],
        vec![82,53,470],
        vec![89,85,450],
        vec![94,60,230],
        vec![13,39,321],
        vec![23,48,195],
        vec![92,49,452],
        vec![60,86,92],
        vec![95,120,31],
        vec![28,45,429],
        vec![90,71,153],
        vec![51,19,132],
        vec![88,60,258],
        vec![121,83,377],
        vec![134,95,130],
        vec![84,129,341],
        vec![51,105,106],
        vec![70,125,138],
        vec![75,43,68],
        vec![108,7,124],
        vec![59,21,480],
        vec![30,31,425],
        vec![93,134,23],
        vec![68,76,109],
        vec![82,120,237],
        vec![20,120,50],
        vec![21,70,316],
        vec![105,48,383],
        vec![33,23,133],
        vec![92,21,147],
        vec![16,94,281],
        vec![30,74,70],
        vec![49,29,282],
        vec![61,103,273],
        vec![64,116,112],
        vec![0,34,393],
        vec![100,26,386],
        vec![99,12,298],
        vec![23,3,113],
        vec![69,53,463],
        vec![6,81,185],
        vec![127,74,128],
        vec![66,74,7],
        vec![11,61,270],
        vec![100,49,458],
        vec![69,103,429],
        vec![83,61,70],
        vec![57,96,469],
        vec![83,134,66],
        vec![40,120,116],
        vec![5,111,310],
        vec![11,97,422],
        vec![84,12,101],
        vec![24,8,391],
        vec![33,75,256],
        vec![118,98,307],
        vec![111,43,384],
        vec![18,28,127],
        vec![79,119,367],
        vec![129,113,331],
        vec![126,58,293],
        vec![18,23,445],
        vec![41,132,352],
        vec![120,74,82],
        vec![29,81,53],
        vec![123,29,462],
        vec![25,120,10],
        vec![4,33,359],
        vec![98,48,91],
        vec![104,3,187],
        vec![128,40,376],
        vec![89,37,314],
        vec![124,122,44],
        vec![29,77,88],
        vec![96,117,349],
        vec![97,17,483],
        vec![82,117,243],
        vec![98,69,311],
        vec![14,7,500],
        vec![72,36,148],
        vec![90,53,491],
        vec![125,71,432],
        vec![24,119,15],
        vec![130,118,161],
        vec![54,73,389],
        vec![88,32,276],
        vec![35,41,183],
        vec![94,56,336],
        vec![8,34,407],
        vec![10,50,421],
        vec![127,18,231],
        vec![126,115,109],
        vec![96,70,231],
        vec![36,32,272],
        vec![63,23,252],
        vec![52,57,409],
        vec![91,10,336],
        vec![122,38,398],
        vec![42,86,481],
        vec![32,91,8],
        vec![56,81,258],
        vec![49,6,439],
        vec![116,40,72],
        vec![119,62,17],
        vec![40,124,289],
        vec![134,69,355],
        vec![32,59,121],
        vec![65,129,258],
        vec![106,61,146],
        vec![94,41,113],
        vec![82,34,209],
        vec![119,44,462],
        vec![88,62,16],
        vec![30,134,365],
        vec![30,56,42],
        vec![104,134,397],
        vec![129,25,226],
        vec![104,14,55],
        vec![123,92,194],
        vec![85,21,386],
        vec![57,13,141],
        vec![76,13,118],
        vec![48,88,436],
        vec![121,0,155],
        vec![39,74,38],
        vec![35,104,188],
        vec![80,100,475],
        vec![128,34,219],
        vec![126,114,444],
        vec![13,25,465],
        vec![68,95,293],
        vec![132,56,204],
        vec![102,126,427],
        vec![105,70,34],
        vec![116,41,258],
        vec![97,128,458],
        vec![77,98,496],
        vec![27,123,425],
        vec![54,32,496],
        vec![77,63,17],
        vec![124,66,253],
        vec![132,55,283],
        vec![63,87,295],
        vec![82,33,267],
        vec![123,49,78],
        vec![86,31,468],
        vec![3,21,459],
        vec![51,21,342],
        vec![123,71,257],
        vec![12,90,431],
        vec![41,29,145],
        vec![110,124,355],
        vec![0,19,174],
        vec![79,133,414],
        vec![58,22,183],
        vec![72,79,429],
        vec![72,128,69],
        vec![85,70,429],
        vec![22,77,489],
        vec![2,108,50],
        vec![101,12,128],
        vec![68,53,41],
        vec![85,98,374],
        vec![54,44,211],
        vec![3,56,390],
        vec![86,87,317],
        vec![114,82,282],
        vec![95,88,439],
        vec![1,35,187],
        vec![17,57,220],
        vec![118,6,443],
        vec![11,81,4],
        vec![117,50,253],
        vec![60,29,118],
        vec![8,5,364],
        vec![51,7,194],
        vec![121,45,235],
        vec![38,13,170],
        vec![21,41,218],
        vec![64,24,294],
        vec![50,80,73],
        vec![114,67,332],
        vec![12,39,32],
        vec![68,36,390],
        vec![89,127,110],
        vec![113,126,239],
        vec![16,117,425],
        vec![43,42,454],
        vec![17,104,192],
        vec![7,133,28],
        vec![84,56,335],
        vec![63,44,449],
        vec![108,73,96],
        vec![53,27,171],
        vec![103,31,256],
        vec![87,47,372],
        vec![16,30,126],
        vec![59,63,49],
        vec![108,56,66],
        vec![74,10,431],
        vec![8,54,302],
        vec![74,117,452],
        vec![17,74,159],
        vec![85,20,475],
        vec![102,54,299],
        vec![16,42,123],
        vec![105,63,453],
        vec![9,37,403],
        vec![1,52,390],
        vec![38,16,418],
        vec![41,11,144],
        vec![71,98,76],
        vec![75,85,57],
        vec![98,125,469],
        vec![48,45,114],
        vec![58,52,7],
        vec![125,27,311],
        vec![84,107,301],
        vec![1,47,475],
        vec![125,43,458],
        vec![5,89,165],
        vec![2,21,200],
        vec![129,53,133],
        vec![98,17,429],
        vec![78,101,428],
        vec![80,45,459],
        vec![95,37,247],
        vec![8,63,226],
        vec![115,9,174],
        vec![5,72,340],
        vec![42,57,236],
        vec![42,5,144],
        vec![76,80,159],
        vec![76,45,484],
        vec![79,10,214],
        vec![89,123,443],
        vec![95,12,345],
        vec![131,68,257],
        vec![98,20,6],
        vec![79,69,123],
        vec![127,109,372],
        vec![71,94,155],
        vec![34,108,364]
        ], 125));
}



//  let mut graph = vec![vec![]; n as usize];
//         for meeting in meetings {
//             let (a, b) = (meeting[0] as usize, meeting[1] as usize);
//             graph[a].push(b);
//             graph[b].push(a);
//         }
//         let mut visited = vec![false; n as usize];
//         let mut queue = std::collections::VecDeque::new();
//         queue.push_back(first_person as usize);
//         visited[first_person as usize] = true;
//         let mut result = vec![];
//         while let Some(person) = queue.pop_front() {
//             result.push(person as i32);
//             for &next in &graph[person] {
//                 if !visited[next] {
//                     visited[next] = true;
//                     queue.push_back(next);
//                 }
//             }
//         }
//         result